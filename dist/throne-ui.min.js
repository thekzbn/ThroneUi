class ThroneUI { constructor() { this.currentTheme = localStorage.getItem('throne-theme') || 'light'; this.currentRoute = ''; this.routes = new Map(); this.components = new Map(); this.init(); } init() { this.setTheme(this.currentTheme); this.initThemeToggle(); this.initSpaRouting(); this.initNavigation(); this.initForms(); this.initCards(); this.initModals(); this.initDropdowns(); this.initTabs(); this.initAccordions(); this.initTooltips(); this.initProgressBars(); this.initAlerts(); this.initDrawers(); } setTheme(theme) { this.currentTheme = theme; document.documentElement.setAttribute('data-theme', theme); localStorage.setItem('throne-theme', theme); const toggles = document.querySelectorAll('.theme-toggle'); toggles.forEach(toggle => { const icon = toggle.querySelector('.material-symbols-outlined') || toggle; icon.textContent = theme === 'dark' ? 'light_mode' : 'dark_mode'; toggle.setAttribute('aria-label', `switch to ${theme === 'dark' ? 'light' : 'dark'} theme`); }); } toggleTheme() { const newTheme = this.currentTheme === 'light' ? 'dark' : 'light'; this.setTheme(newTheme); } initThemeToggle() { const toggles = document.querySelectorAll('.theme-toggle'); toggles.forEach(toggle => { toggle.addEventListener('click', () => this.toggleTheme()); }); } initSpaRouting() { this.handleRouteChange(); window.addEventListener('popstate', () => { this.handleRouteChange(); }); document.addEventListener('click', (e) => { const link = e.target.closest('a[data-route]'); if (link) { e.preventDefault(); const route = link.getAttribute('data-route'); this.navigateTo(route); } }); } registerRoute(path, handler) { this.routes.set(path, handler); } navigateTo(path) { if (path === this.currentRoute) return; history.pushState(null, '', path); this.handleRouteChange(); } handleRouteChange() { const path = window.location.pathname; this.currentRoute = path; document.querySelectorAll('.route').forEach(route => { route.classList.remove('active'); }); const currentRoute = document.querySelector(`[data-route-path="${path}"]`); if (currentRoute) { const content = document.querySelector('.spa-content'); if (content) { content.classList.add('transitioning'); setTimeout(() => { currentRoute.classList.add('active'); content.classList.remove('transitioning'); }, 150); } else { currentRoute.classList.add('active'); } } document.querySelectorAll('[data-route]').forEach(link => { const linkPath = link.getAttribute('data-route'); if (linkPath === path) { link.classList.add('active'); } else { link.classList.remove('active'); } }); const handler = this.routes.get(path); if (handler) { handler(); } } initNavigation() { const navLinks = document.querySelectorAll('.nav-link:not([data-route])'); navLinks.forEach(link => { link.addEventListener('click', (e) => { navLinks.forEach(l => l.classList.remove('active')); link.classList.add('active'); }); }); } initForms() { const forms = document.querySelectorAll('form'); forms.forEach(form => { const inputs = form.querySelectorAll('.form-input, .form-textarea, .form-select'); inputs.forEach(input => { input.addEventListener('invalid', () => { input.style.borderColor = 'var(--accent-color)'; }); input.addEventListener('input', () => { if (input.checkValidity()) { input.style.borderColor = 'var(--text-secondary)'; } }); if (input.placeholder) { input.addEventListener('focus', () => { const label = form.querySelector(`label[for="${input.id}"]`); if (label) { label.style.transform = 'translateY(-0.5rem) scale(0.85)'; label.style.color = 'var(--accent-color)'; } }); input.addEventListener('blur', () => { const label = form.querySelector(`label[for="${input.id}"]`); if (label && !input.value) { label.style.transform = ''; label.style.color = ''; } }); } }); form.addEventListener('submit', (e) => { const submitBtn = form.querySelector('[type="submit"]'); if (submitBtn) { const originalText = submitBtn.textContent; submitBtn.textContent = 'submitting...'; submitBtn.disabled = true; setTimeout(() => { submitBtn.textContent = originalText; submitBtn.disabled = false; }, 2000); } }); }); } initCards() { const cards = document.querySelectorAll('.card'); cards.forEach(card => { card.addEventListener('mouseenter', () => { card.style.transform = 'translateY(-2px)'; }); card.addEventListener('mouseleave', () => { card.style.transform = 'translateY(0)'; }); }); } initModals() { document.addEventListener('click', (e) => { const trigger = e.target.closest('[data-modal-target]'); if (trigger) { const targetId = trigger.getAttribute('data-modal-target'); this.openModal(targetId); } const close = e.target.closest('[data-modal-close]'); if (close) { const modal = close.closest('.modal'); if (modal) { this.closeModal(modal.id); } } }); document.querySelectorAll('.modal').forEach(modal => { modal.addEventListener('click', (e) => { if (e.target === modal) { this.closeModal(modal.id); } }); }); document.addEventListener('keydown', (e) => { if (e.key === 'Escape') { const activeModal = document.querySelector('.modal.active'); if (activeModal) { this.closeModal(activeModal.id); } } }); } openModal(modalId) { const modal = document.getElementById(modalId); if (modal) { modal.classList.add('active'); document.body.style.overflow = 'hidden'; } } closeModal(modalId) { const modal = document.getElementById(modalId); if (modal) { modal.classList.remove('active'); document.body.style.overflow = ''; } } initDropdowns() { document.addEventListener('click', (e) => { const trigger = e.target.closest('[data-dropdown-trigger]'); if (trigger) { e.preventDefault(); const dropdown = trigger.closest('.dropdown'); if (dropdown) { dropdown.classList.toggle('active'); } } else { document.querySelectorAll('.dropdown.active').forEach(dropdown => { dropdown.classList.remove('active'); }); } }); } initTabs() { document.addEventListener('click', (e) => { const tab = e.target.closest('[data-tab]'); if (tab) { const tabContainer = tab.closest('.tabs'); const targetId = tab.getAttribute('data-tab'); tabContainer.querySelectorAll('.tab').forEach(t => t.classList.remove('active')); tab.classList.add('active'); document.querySelectorAll('.tab-content').forEach(content => { content.classList.remove('active'); }); const targetContent = document.getElementById(targetId); if (targetContent) { targetContent.classList.add('active'); } } }); } initAccordions() { document.addEventListener('click', (e) => { const header = e.target.closest('.accordion-header'); if (header) { const item = header.closest('.accordion-item'); const isActive = item.classList.contains('active'); const accordion = item.closest('.accordion'); accordion.querySelectorAll('.accordion-item').forEach(i => { i.classList.remove('active'); }); if (!isActive) { item.classList.add('active'); } } }); } initTooltips() { document.querySelectorAll('[data-tooltip]').forEach(element => { element.classList.add('tooltip'); }); } initProgressBars() { document.querySelectorAll('.progress-bar[data-progress]').forEach(bar => { const progress = bar.getAttribute('data-progress'); bar.style.width = `${progress}%`; }); const observer = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { const bar = entry.target; const progress = bar.getAttribute('data-progress'); bar.style.width = `${progress}%`; } }); }); document.querySelectorAll('.progress-bar[data-animate]').forEach(bar => { observer.observe(bar); }); } initAlerts() { document.addEventListener('click', (e) => { const close = e.target.closest('.alert-close'); if (close) { const alert = close.closest('.alert'); if (alert) { alert.style.opacity = '0'; alert.style.transform = 'translateY(-10px)'; setTimeout(() => { alert.remove(); }, 300); } } }); } initDrawers() { document.addEventListener('click', (e) => { const trigger = e.target.closest('[data-drawer-target]'); if (trigger) { const targetId = trigger.getAttribute('data-drawer-target'); this.openDrawer(targetId); } const close = e.target.closest('[data-drawer-close]'); if (close) { const drawer = close.closest('.drawer'); if (drawer) { this.closeDrawer(drawer.id); } } }); document.querySelectorAll('.drawer-backdrop').forEach(backdrop => { backdrop.addEventListener('click', () => { const activeDrawer = document.querySelector('.drawer.active'); if (activeDrawer) { this.closeDrawer(activeDrawer.id); } }); }); } openDrawer(drawerId) { const drawer = document.getElementById(drawerId); const backdrop = document.querySelector('.drawer-backdrop'); if (drawer) { drawer.classList.add('active'); if (backdrop) { backdrop.classList.add('active'); } } } closeDrawer(drawerId) { const drawer = document.getElementById(drawerId); const backdrop = document.querySelector('.drawer-backdrop'); if (drawer) { drawer.classList.remove('active'); if (backdrop) { backdrop.classList.remove('active'); } } } static createElement(tag, className = '', content = '') { const element = document.createElement(tag); if (className) element.className = className; if (content) element.textContent = content; return element; } static createButton(text, type = 'btn-primary', onClick = null) { const button = this.createElement('button', `btn ${type}`, text); if (onClick) button.addEventListener('click', onClick); return button; } static createIconButton(icon, text = '', type = 'btn-primary', onClick = null) { const button = this.createElement('button', `btn ${type}`); const iconEl = this.createElement('span', 'material-symbols-outlined', icon); button.appendChild(iconEl); if (text) { button.appendChild(document.createTextNode(text)); } if (onClick) button.addEventListener('click', onClick); return button; } static createCard(title, subtitle = '', content = '', type = 'card') { const card = this.createElement('div', `card ${type}`); if (title) { const titleEl = this.createElement('h3', 'card-title', title); card.appendChild(titleEl); } if (subtitle) { const subtitleEl = this.createElement('div', 'card-subtitle', subtitle); card.appendChild(subtitleEl); } if (content) { const contentEl = this.createElement('p', 'card-text', content); card.appendChild(contentEl); } return card; } static createFormControl(label, inputType = 'text', placeholder = '', required = false) { const control = this.createElement('div', 'form-control'); const id = `input-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`; const labelEl = this.createElement('label', 'form-label', label); labelEl.setAttribute('for', id); control.appendChild(labelEl); let input; if (inputType === 'textarea') { input = this.createElement('textarea', 'form-textarea'); } else if (inputType === 'select') { input = this.createElement('select', 'form-select'); } else { input = this.createElement('input', 'form-input'); input.type = inputType; } input.id = id; if (placeholder) input.placeholder = placeholder; if (required) input.required = true; control.appendChild(input); return control; } static createBadge(text, type = 'badge') { return this.createElement('span', `badge ${type}`, text); } static createChip(text, removable = false) { const chip = this.createElement('div', 'chip'); chip.appendChild(document.createTextNode(text)); if (removable) { chip.classList.add('chip-removable'); const removeBtn = this.createElement('button', 'chip-remove'); const icon = this.createElement('span', 'material-symbols-outlined', 'close'); removeBtn.appendChild(icon); removeBtn.addEventListener('click', () => chip.remove()); chip.appendChild(removeBtn); } return chip; } static createAlert(message, type = 'alert', dismissible = false) { const alert = this.createElement('div', `alert ${type}`, message); if (dismissible) { alert.classList.add('alert-dismissible'); const closeBtn = this.createElement('button', 'alert-close'); const icon = this.createElement('span', 'material-symbols-outlined', 'close'); closeBtn.appendChild(icon); alert.appendChild(closeBtn); } return alert; } static createProgressBar(progress = 0, animated = false) { const container = this.createElement('div', 'progress'); const bar = this.createElement('div', 'progress-bar'); bar.setAttribute('data-progress', progress); if (animated) bar.setAttribute('data-animate', 'true'); container.appendChild(bar); return container; } static createSpinner(size = 'spinner') { return this.createElement('div', size); } static createSkeleton(type = 'skeleton-text') { return this.createElement('div', `skeleton ${type}`); } static createTimeline(items = []) { const timeline = this.createElement('div', 'timeline'); items.forEach(item => { const timelineItem = this.createElement('div', 'timeline-item'); if (item.date) { const date = this.createElement('div', 'timeline-date', item.date); timelineItem.appendChild(date); } if (item.title) { const title = this.createElement('h3', 'timeline-title', item.title); timelineItem.appendChild(title); } if (item.subtitle) { const subtitle = this.createElement('div', 'timeline-subtitle', item.subtitle); timelineItem.appendChild(subtitle); } if (item.content) { const content = this.createElement('p', 'timeline-content', item.content); timelineItem.appendChild(content); } timeline.appendChild(timelineItem); }); return timeline; } static createGrid(items = [], columns = 3) { const grid = this.createElement('div', `grid grid-${columns}`); items.forEach(item => { if (typeof item === 'string') { const div = this.createElement('div', '', item); grid.appendChild(div); } else { grid.appendChild(item); } }); return grid; } static createAvatar(src, alt = '', size = 'avatar-md', online = false) { const avatar = this.createElement('div', `avatar ${size}`); if (online) avatar.classList.add('avatar-online'); const img = this.createElement('img'); img.src = src; img.alt = alt; avatar.appendChild(img); return avatar; } static createTable(headers = [], rows = [], options = {}) { const table = this.createElement('table', 'table'); if (options.hover) table.classList.add('table-hover'); if (options.striped) table.classList.add('table-striped'); if (options.bordered) table.classList.add('table-bordered'); if (options.small) table.classList.add('table-sm'); if (headers.length > 0) { const thead = this.createElement('thead'); const headerRow = this.createElement('tr'); headers.forEach(header => { const th = this.createElement('th', '', header); headerRow.appendChild(th); }); thead.appendChild(headerRow); table.appendChild(thead); } if (rows.length > 0) { const tbody = this.createElement('tbody'); rows.forEach(row => { const tr = this.createElement('tr'); row.forEach(cell => { const td = this.createElement('td', '', cell); tr.appendChild(td); }); tbody.appendChild(tr); }); table.appendChild(tbody); } return table; } static createPagination(currentPage = 1, totalPages = 5) { const pagination = this.createElement('ul', 'pagination'); const prevItem = this.createElement('li', 'page-item'); if (currentPage === 1) prevItem.classList.add('disabled'); const prevLink = this.createElement('a', 'page-link'); const prevIcon = this.createElement('span', 'material-symbols-outlined', 'chevron_left'); prevLink.appendChild(prevIcon); prevItem.appendChild(prevLink); pagination.appendChild(prevItem); for (let i = 1; i <= totalPages; i++) { const pageItem = this.createElement('li', 'page-item'); if (i === currentPage) pageItem.classList.add('active'); const pageLink = this.createElement('a', 'page-link', i.toString()); pageItem.appendChild(pageLink); pagination.appendChild(pageItem); } const nextItem = this.createElement('li', 'page-item'); if (currentPage === totalPages) nextItem.classList.add('disabled'); const nextLink = this.createElement('a', 'page-link'); const nextIcon = this.createElement('span', 'material-symbols-outlined', 'chevron_right'); nextLink.appendChild(nextIcon); nextItem.appendChild(nextLink); pagination.appendChild(nextItem); return pagination; } static fadeIn(element, duration = 300) { element.style.opacity = '0'; element.style.transition = `opacity ${duration}ms ease`; requestAnimationFrame(() => { element.style.opacity = '1'; }); } static slideUp(element, duration = 300) { element.style.transform = 'translateY(20px)'; element.style.opacity = '0'; element.style.transition = `transform ${duration}ms ease, opacity ${duration}ms ease`; requestAnimationFrame(() => { element.style.transform = 'translateY(0)'; element.style.opacity = '1'; }); } static slideDown(element, duration = 300) { element.style.transform = 'translateY(-20px)'; element.style.opacity = '0'; element.style.transition = `transform ${duration}ms ease, opacity ${duration}ms ease`; requestAnimationFrame(() => { element.style.transform = 'translateY(0)'; element.style.opacity = '1'; }); } static slideLeft(element, duration = 300) { element.style.transform = 'translateX(20px)'; element.style.opacity = '0'; element.style.transition = `transform ${duration}ms ease, opacity ${duration}ms ease`; requestAnimationFrame(() => { element.style.transform = 'translateX(0)'; element.style.opacity = '1'; }); } static slideRight(element, duration = 300) { element.style.transform = 'translateX(-20px)'; element.style.opacity = '0'; element.style.transition = `transform ${duration}ms ease, opacity ${duration}ms ease`; requestAnimationFrame(() => { element.style.transform = 'translateX(0)'; element.style.opacity = '1'; }); } static scaleIn(element, duration = 300) { element.style.transform = 'scale(0.9)'; element.style.opacity = '0'; element.style.transition = `transform ${duration}ms ease, opacity ${duration}ms ease`; requestAnimationFrame(() => { element.style.transform = 'scale(1)'; element.style.opacity = '1'; }); } static smoothScrollTo(targetId) { const target = document.getElementById(targetId); if (target) { target.scrollIntoView({ behavior: 'smooth', block: 'start' }); } } static isInViewport(element) { const rect = element.getBoundingClientRect(); return ( rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth) ); } static showToast(message, duration = 3000) { const toast = this.createElement('div', 'toast', message); document.body.appendChild(toast); setTimeout(() => { toast.classList.add('show'); }, 100); setTimeout(() => { toast.classList.remove('show'); setTimeout(() => { toast.remove(); }, 300); }, duration); } static setStorage(key, value) { try { localStorage.setItem(key, JSON.stringify(value)); } catch (e) { console.warn('failed to save to localStorage:', e); } } static getStorage(key, defaultValue = null) { try { const item = localStorage.getItem(key); return item ? JSON.parse(item) : defaultValue; } catch (e) { console.warn('failed to read from localStorage:', e); return defaultValue; } } static removeStorage(key) { try { localStorage.removeItem(key); } catch (e) { console.warn('failed to remove from localStorage:', e); } } static debounce(func, wait) { let timeout; return function executedFunction(...args) { const later = () => { clearTimeout(timeout); func(...args); }; clearTimeout(timeout); timeout = setTimeout(later, wait); }; } static throttle(func, limit) { let inThrottle; return function executedFunction(...args) { if (!inThrottle) { func.apply(this, args); inThrottle = true; setTimeout(() => inThrottle = false, limit); } }; } } document.addEventListener('DOMContentLoaded', () => { window.throneUI = new ThroneUI(); }); if (typeof module !== 'undefined' && module.exports) { module.exports = ThroneUI; }